using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using TourTravel_Web.Areas.Admin.CustomModels;
using TourTravel_Web.Areas.Admin.Models;
using TourTravel_Web.Controllers;
using TourTravel_Web.Helpers;

namespace TourTravel_Web.Areas.Admin.Controllers
{
    [Authorize]
    public class TourPackageController : BaseController
    {
        ApiConnection objAPI = new ApiConnection("Admin");
        private string FileUrl = ConfigurationManager.AppSettings["FileURL"];
        public ActionResult Index()
        {
            return View();
        }
        public ActionResult Add()
        {
            try
            {
                TourPackageManageModel1 model = new TourPackageManageModel1();
                model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Add(TourPackageManageModel1 model)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string linktext = Regex.Replace(model.Package.PackageName, @"[^0-9A-Za-z ,]", "").Replace(" ", "-");
                    linktext = linktext.Replace("--", "-").ToLower();

                    model.Package.LinkText = linktext;
                    string jsonStr = JsonConvert.SerializeObject(model.Package);

                    string result = objAPI.PostRecordtoApI("packageconfig", "savepackage", jsonStr);
                    if (result.ToLower().Contains("error"))
                    {
                        TempData["ErrMsg"] = result;
                        model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                        return View(model);
                    }
                    return RedirectToAction("packageitinerary", new { @id = Convert.ToInt64(result) });
                }
                model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult Edit(long id)
        {
            try
            {
                TourPackageManageModel1 model = new TourPackageManageModel1();
                model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                model.Package = objAPI.GetObjectByKey<utblTourPackage>("packageconfig", "packagebyid", id.ToString(), "id");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(TourPackageManageModel1 model)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string linktext = Regex.Replace(model.Package.PackageName, @"[^0-9A-Za-z ,]", "").Replace(" ", "-");
                    linktext = linktext.Replace("--", "-").ToLower();

                    model.Package.LinkText = linktext;
                    string jsonStr = JsonConvert.SerializeObject(model.Package);

                    string result = objAPI.PostRecordtoApI("packageconfig", "savepackage", jsonStr);
                    if (result.ToLower().Contains("error"))
                    {
                        TempData["ErrMsg"] = result;
                        model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                        return View(model);
                    }
                    return RedirectToAction("packageitinerary", new { @id = Convert.ToInt64(result) });
                }
                model.PackageTypes = objAPI.GetAllRecords<utblMstPackageType>("configuration", "allpackagetypes");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult PackageItinerary(long id)
        {
            try
            {
                TourPackageManageModel2 model = new TourPackageManageModel2();
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", id.ToString(), "id");
                model.Itineraries = objAPI.GetRecordsByID<utblTourPackageItinerary>("packageconfig", "packageitineraries", id);
                //if (model.Itineraries.Count() == 0)
                //{
                List<utblTourPackageItinerary> itineraries = new List<utblTourPackageItinerary>();
                for (int i = 1; i <= model.Package.TotalDays; i++)
                {
                    utblTourPackageItinerary itinerary = model.Itineraries.Where(x => x.DayNo == i).FirstOrDefault();
                    if (itinerary == null)
                        itinerary = new utblTourPackageItinerary() { PackageID = id, DayNo = i };
                    itineraries.Add(itinerary);
                }
                model.Itineraries = itineraries;
                //}
                model.ItineraryList = objAPI.GetAllRecords<utblMstitinerarie>("configuration", "allitineraries");
                model.DestinationList = objAPI.GetAllRecords<utblMstDestination>("configuration", "alldestinations");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult PackageItinerary(TourPackageManageModel2 model)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string jsonStr = JsonConvert.SerializeObject(model.Itineraries);
                    string result = objAPI.PostRecordtoApI("packageconfig", "saveitineraries", jsonStr);
                    if (!result.ToLower().Contains("error"))
                    {
                        TempData["ErrMsg"] = "Tour Package Itineraries saved";
                        return RedirectToAction("images", new { id = model.Package.PackageID });
                    }
                    TempData["ErrMsg"] = result;
                }
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", model.Package.PackageID.ToString(), "id");
                model.ItineraryList = objAPI.GetAllRecords<utblMstitinerarie>("configuration", "allitineraries");
                model.DestinationList = objAPI.GetAllRecords<utblMstDestination>("configuration", "alldestinations");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult Images(long id, int PageNo = 1, int PageSize = 10)
        {
            try
            {
                string query = "PackageID=" + id + "&PageNo=" + PageNo + "&PageSize=" + PageSize;
                TourPackageImageAPIVM apiModel = objAPI.GetRecordByQueryString<TourPackageImageAPIVM>("packageconfig", "packageimages", query);
                TourPackageImageVM model = new TourPackageImageVM();
                model.PackageImages = apiModel.PackageImages;
                model.PagingInfo = new PagingInfo { CurrentPage = PageNo, ItemsPerPage = PageSize, TotalItems = apiModel.TotalRecords };
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", id.ToString(), "id");
                if (Request.IsAjaxRequest())
                {
                    return PartialView("_pvImageList", model);
                }
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult AddImage(long PackageID)
        {
            try
            {
                PackageImageSaveModel model = new PackageImageSaveModel();
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", PackageID.ToString(), "id");
                model.Image = new utblTourPackageImage() { PackageID = PackageID };
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddImage(PackageImageSaveModel model)
        {
            try
            {
                var validData = true;
                if (model.ImageStrs.PhotoThumb == null || model.ImageStrs.PhotoThumb == null)
                {
                    ModelState.AddModelError("PhotoStrs.PhotoThumb", "Select a Photo");
                    validData = false;
                }
                if (validData && ModelState.IsValid)
                {
                    Random rand = new Random();
                    string name = model.Image.PackageID + "_" + DateTime.Now.ToString("yyyyMMdd") + "_" + rand.Next(50) + ".jpg";
                    string normal_result = SaveImage(model.ImageStrs.PhotoNormal, model.ImageStrs.PhotoThumb, name);
                    if (normal_result.Contains("Error"))
                    {
                        TempData["ErrMsg"] = normal_result;
                        model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", model.Image.PackageID.ToString(), "id");
                        return View(model);
                    }
                    model.Image.PhotoNormalPath = FileUrl + "Photos/Normal/" + normal_result;
                    model.Image.PhotoThumbPath = FileUrl + "Photos/Thumb/" + normal_result;

                    string jsonStr=JsonConvert.SerializeObject(model.Image);
                    string result = objAPI.PostRecordtoApI("packageconfig", "saveimage", jsonStr);
                    if (!result.ToLower().Contains("error"))
                    {
                        TempData["ErrMsg"] = "New Photo Added";
                        return RedirectToAction("images", "tourpackage", new { Area = "Admin", id = model.Image.PackageID });
                    }
                    TempData["ErrMsg"] = result;
                    DeleteFile(name);
                }
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", model.Image.PackageID.ToString(), "id");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult EditImage(long PackageID, long ImageID)
        {
            try
            {
                PackageImageSaveModel model = new PackageImageSaveModel();
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", PackageID.ToString(), "id");
                model.Image = objAPI.GetObjectByKey<utblTourPackageImage>("packageconfig", "imagebyid", ImageID.ToString(), "id");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditImage(PackageImageSaveModel model)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string name = "";
                    if (model.ImageStrs.PhotoNormal != null)
                    {
                        Random rand = new Random();
                        name = model.Image.PackageID + "_" + DateTime.Now.ToString("yyyyMMdd") + "_" + rand.Next(50) + ".jpg";
                        string normal_result = SaveImage(model.ImageStrs.PhotoNormal, model.ImageStrs.PhotoThumb, name);
                        if (normal_result.Contains("Error"))
                        {
                            TempData["ErrMsg"] = normal_result;
                            model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", model.Image.PackageID.ToString(), "id");
                            return View(model);
                        }
                        model.Image.PhotoNormalPath = FileUrl + "Photos/Normal/" + normal_result;
                        model.Image.PhotoThumbPath = FileUrl + "Photos/Thumb/" + normal_result;
                    }

                    string jsonStr = JsonConvert.SerializeObject(model.Image);
                    string result = objAPI.PostRecordtoApI("packageconfig", "saveimage", jsonStr);
                    if (!result.ToLower().Contains("error"))
                    {
                        TempData["ErrMsg"] = "Photo Updated";
                        return RedirectToAction("images", "tourpackage", new { Area = "Admin", id = model.Image.PackageID });
                    }
                    TempData["ErrMsg"] = result;
                    DeleteFile(name);
                }
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", model.Image.PackageID.ToString(), "id");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteImage(long PackageID, long ImageID)
        {
            try
            {
                string result = objAPI.DeleteRecordByKey("packageconfig", "deleteimage", ImageID.ToString(), "id");
                if (result.Contains("Error"))
                    TempData["ErrMsg"] = result;
                else
                {
                    if (!(result == null || result == ""))
                        DeleteFile(result);
                    TempData["ErrMsg"] = "Photo Removed";
                }
                return RedirectToAction("images", "tourpackage", new { Area = "Admin", id = PackageID });
            }
            catch (Exception)
            {
                
                throw;
            }
        }
        public ActionResult ActivityInclusions(long id)
        {
            try
            {
                TourPackageManageModel3 model = new TourPackageManageModel3();
                model.Package = objAPI.GetObjectByKey<PackageBriefInfo>("packageconfig", "PackageBrief", id.ToString(), "id");
                model.Activities = objAPI.GetRecordsByID<PackageActivities>("packageconfig", "packageactivities", id);
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public JsonResult GetItineraryDetails(long id)
        {
            try
            {
                var model = objAPI.GetObjectByKey<utblMstitinerarie>("configuration", "itinerarybyid", id.ToString(), "ItineraryID");
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region Helper
        private string SaveImage(string imageStrNormal, string imageStrThumb, string name)
        {
            try
            {
                var path = Path.Combine(Server.MapPath("~/Uploads/Photos/Normal"), name);
                var folderpath = Server.MapPath("~/Uploads/Photos/Normal");

                //Check if normal directory exist
                if (!System.IO.Directory.Exists(folderpath))
                {
                    System.IO.Directory.CreateDirectory(folderpath); //Create directory if it doesn't exist
                }
                string x = imageStrNormal.Replace("data:image/jpeg;base64,", "");
                byte[] imageBytes = Convert.FromBase64String(x);

                System.IO.File.WriteAllBytes(path, imageBytes);

                var thumb_path = Path.Combine(Server.MapPath("~/Uploads/Photos/Thumb"), name);
                var thumb_folderpath = Server.MapPath("~/Uploads/Photos/Thumb");

                //Check if thumb directory exist
                if (!System.IO.Directory.Exists(thumb_folderpath))
                {
                    System.IO.Directory.CreateDirectory(thumb_folderpath); //Create directory if it doesn't exist
                }
                string thumb_x = imageStrThumb.Replace("data:image/jpeg;base64,", "");
                byte[] thumb_imageBytes = Convert.FromBase64String(thumb_x);

                System.IO.File.WriteAllBytes(thumb_path, thumb_imageBytes);

                return name;
            }
            catch (Exception ex)
            {
                return "Error: " + ex.Message;
            }
        }
        private void DeleteFile(string filepath)
        {
            try
            {
                string[] fileArr = filepath.Split('/');
                string filename = fileArr[fileArr.Length - 1];
                string serverPath = "";
                serverPath = Path.Combine(Server.MapPath("~/Uploads/Photos/Normal"), filename);
                if (System.IO.File.Exists(serverPath))
                {
                    System.IO.File.Delete(serverPath);
                }

                string thumb_serverPath = "";
                thumb_serverPath = Path.Combine(Server.MapPath("~/Uploads/Photos/Thumb"), filename);
                if (System.IO.File.Exists(thumb_serverPath))
                {
                    System.IO.File.Delete(thumb_serverPath);
                }
            }
            catch (Exception)
            {

                //throw;
            }
        }
        private void DeleteAlbumFiles(long id)
        {
            try
            {
                string serverNormalPath = @"" + Server.MapPath("~/Uploads/Photos/Normal");
                string albumfilename = @"" + id + "_";
                string[] NormalfileList = System.IO.Directory.GetFiles(serverNormalPath, albumfilename + "*.jpg");
                foreach (string file in NormalfileList)
                {
                    //System.Diagnostics.Debug.WriteLine(file + "will be deleted");
                    System.IO.File.Delete(file);
                }
            }
            catch (Exception)
            {

                //throw;
            }
        }
        #endregion
    }
}