using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TourTravel_Web.Areas.Admin.CustomModels;
using TourTravel_Web.Areas.Admin.Models;
using TourTravel_Web.CustomModels;
using TourTravel_Web.Helpers;

namespace TourTravel_Web.Controllers
{
    public class GenTourPackageController : Controller
    {
        ApiConnection objAPI = new ApiConnection("General");
        private string FileUrl = ConfigurationManager.AppSettings["FileURL"];

        public ActionResult TourPackageList(int PageNo = 1, int PageSize = 10, string SearchTerm = "")
        {

            ViewBag.ActiveURL = "/general/tourpackagelist";
            string query = "PageNo=" + PageNo + "&PageSize=" + PageSize + "&SearchTerm=" + SearchTerm;
            GenTourPackageAPIVM apiModel = objAPI.GetRecordByQueryString<GenTourPackageAPIVM>("tourpackage", "GenTourPackageList", query);
            GenTourPackageVM model = new GenTourPackageVM();
            model.PackageList = apiModel.TourPackageList;
            model.PagingInfo = new PagingInfo { CurrentPage = PageNo, ItemsPerPage = PageSize, TotalItems = apiModel.TotalRecords };
            if (Request.IsAjaxRequest())
            {
                return PartialView("_pvtourpackageList", model);
            }
            return View(model);

        }
        public ActionResult TourPackageDetails(string name)
        {
            ViewBag.ActiveURL = "/general/tourpackagedetails";
            try
            {
                string query;
                query = "linktext=" + name;
                GenTourPackageAPIVM model = new GenTourPackageAPIVM();

                model.GenTourPackageDtlView = objAPI.GetRecordByQueryString<GenTourPackageDtlView>("tourpackage", "GenTourPackageDtl", query);
                long id = model.GenTourPackageDtlView.PackageID;
                model.GenTourPackageCoverImgView = objAPI.GetObjectByKey<GenTourPackageImage>("tourpackage", "GenTourPackageCoverImgView", id.ToString(), "id");
                model.Itineraries = objAPI.GetRecordsByID<PackageItineraryView>("tourpackage", "itinerariesview", id);
                model.Inclusions = objAPI.GetRecordsByID<PackageInclusions>("tourpackage", "packageinclusions", id).Where(x => x.IsSelected).ToList();
                model.Exclusions = objAPI.GetRecordsByID<PackageExclusions>("tourpackage", "packageexclusions", id).Where(x => x.IsSelected).ToList();
                model.AdvActivity = objAPI.GetRecordsByID<PackageActivities>("tourpackage", "PackageActivities", id).Where(x => x.IsSelected).ToList();
                model.GalleryImage = objAPI.GetRecordsByID<GenTourPackageImage>("tourpackage", "PackageGalleryImage", id);
                model.Terms = objAPI.GetRecordsByID<PackageTerms>("tourpackage", "packageterms", id).Where(x => x.IsSelected).ToList();
                model.Cancel = objAPI.GetRecordsByID<PackageCancellations>("tourpackage", "PackageCancellations", id).Where(x => x.IsSelected).ToList();
                model.HotelTypes = objAPI.GetAllRecords<utblMstHotelType>("clientenquiry", "hoteltypes");
                model.CabTypes = objAPI.GetAllRecords<utblMstCabType>("clientenquiry", "cabtypes");
                model.linkname = name;

                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SubmitDirectBooking(GenTourPackageAPIVM model)
        {
            try
            {
                model.ClientEnquiry.RefPackageID = model.GenTourPackageDtlView.PackageID;
                model.ClientEnquiry.NoOfDays = model.GenTourPackageDtlView.Days;
                model.ClientEnquiry.TransDate = DateTime.Now;
                string jsonString = JsonConvert.SerializeObject(model.ClientEnquiry);
                string result = objAPI.PostRecordtoApI("clientenquiry", "SaveDirectClientEnq", jsonString);
                if (result.ToLower().Contains("error"))
                {
                    TempData["ErrMsg"] = result;
                    return RedirectToAction("SubmissionPage", "gentourpackage", new { Area = "", result = "failure" });
                }
                return RedirectToAction("SubmissionPage", "gentourpackage", new { Area = "", result = "Success" });
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public ActionResult SubmitCustomBooking(string name)
        {
            try
            {
                string query;
                query = "linktext=" + name;
                GenTourPackageAPIVM model = new GenTourPackageAPIVM();
                model.GenTourPackageDtlView = objAPI.GetRecordByQueryString<GenTourPackageDtlView>("tourpackage", "GenTourPackageDtl", query);
                long id = model.GenTourPackageDtlView.PackageID;
                model.Itineraries = objAPI.GetRecordsByID<PackageItineraryView>("tourpackage", "itinerariesview", id);

                List<PackageItineraryView> itineraries = new List<PackageItineraryView>();
                for (int i = 1; i <= model.GenTourPackageDtlView.Days; i++)
                {
                    PackageItineraryView itinerary = model.Itineraries.Where(x => x.DayNo == i).FirstOrDefault();
                    if (itinerary == null)
                        itinerary = new PackageItineraryView() { PackageID = id, DayNo = i };
                    itineraries.Add(itinerary);
                }

                //List<PackageItinerarypck> it = new List<PackageItinerarypck>();

                //for (int i = 1; i <= model.GenTourPackageDtlView.Days; i++)
                //{
                //    PackageItinerarypck itinerary = model.Itineraries.Where(x => x.DayNo == i).FirstOrDefault();
                //    if (itinerary == null)
                //        itinerary = new PackageItinerarypck() { PackageID = id, DayNo = i };
                //    it.Add(itinerary);
                //}
               
                model.Itineraries = itineraries;
                model.ItineraryList = objAPI.GetAllRecords<utblMstitinerarie>("clientenquiry", "allitineraries");
                model.DestinationList = objAPI.GetAllRecords<utblMstDestination>("clientenquiry", "alldestinations");
                return View(model);
            }
            catch (AuthorizationException)
            {
                TempData["ErrMsg"] = "Your Login Session has expired. Please Login Again";
                return RedirectToAction("Login", "Account", new { Area = "" });
            }
        }
        public JsonResult GetItineraryDetails(long id)
        {
            try
            {
                var model = objAPI.GetObjectByKey<utblMstitinerarie>("clientenquiry", "itinerarybyid", id.ToString(), "ItineraryID");
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {

                throw;
            }
        }
        public ActionResult SubmissionPage(string result)
        {
            if (result == "Success")
            {
                return View("SubmissionSuccessfull");
            }
            else
            {
                return View("SubmissionFailure");
            }
        }
    }
}